================================================================================
Содержание ВКР (краткое)
================================================================================

********************
Описание данных
********************

Данные представлены в двух модальностях: изображения с видеокамеры и
облака точек, полученные с LIDAR. Подробная разметка была представлена
только для облака точек. В разметке представлены кубоиды с
классами. Кубоид является размеченным объектом. Существует 3 класса
объектов: конечность человека, одежда и человек. Полагается, что все
остальные объекты не представляют интереса.

В датасете находится 100 ситуаций. Каждой ситуации соответствуют три
файла: изображение с камеры, облако точек и разметка в формате JSON. В
разметке находятся параметры кубоидов: положение, размер, вращение и
класс.

********************
Работа с данными
********************

Описание подхода для сегментации облака точек: для каждой точке
вычисляются признаки её облака соседей. *текст про матрицы ковариации,
собственные значения и признаки, которые вычисляются из этого*. На
вход модели машинного обучения были отобраны следующие признаки:
положение точки, яркость точки, *признаки, которые считаются через
собственые значения*.

Для эффективного нахождения соседей точки используется структура
данных KDTree, реализация которой есть в библиотеке Open3D. Есть
несколько способов для отбора множества соседей точки. Radius search -
поиск соседей внутри сферы заданного радиуса. KNN - взятие заданного
числа ближайших стратегий. Был выбран гибридный подход: выбирается k
ближайших точек внутри сферы радиуса r. Также это называется
RKNN. Данный подход имеет лучшее из двух других подходов: признаки
считаются в фиксированном объеме(игнорируются точки-выбросы) и
используется фиксированное число точек.

В исходном датасете имеется несколько проблем. 1) разрешение точек
слишком большое и плотность точек неравномерная. Плотность точек на
полу гораздо больше, они не несут важной информации. Для этого был
использован метод voxel_downsample, что сделало распределение точек
равномерным и уменьшило среднее количество точек в одном снимке с
200000 до 10000, что ускорило генерацию признаков. 2) данные шумные,
на снимках присутствует большое количество точек выбросов. Это
проблема частично решается с помощью отсекания таких точек, у которых
мало соседей после radius search. Но при большом радиусе radius search
данный метод работает плохо. Поэтому был использовано статистическое
отбрасывание аномалий: если точка отклоняется более чем на 2
стандартных отклонения ближайших 20 точек, то точка считается
выбросом. Также было замечено, что точки отдаленные от платформы по
высоте не несут в себе информации, но всегда являются выбросами,
которые портят обучаемость модели машинного обучения. Был выбран порог
для отсечения точек по их высоте. *могу потом дать картинки для
сравнения*

Дизбаланс классов: в датасете всегда наблюдается дизбаланс классов:
точек, принадлежащих поезду или полу всегда больше чем точек,
принадлежающих людям. В таком случае модель машинного обучения будет
практически всегда предсказывать доминирующий класс. Эта проблема
решается введением соответствующих весов штрафования для каждого
класса. За ошибки с редкими классами модель штрафуется на
пропорционально большую величину чем на ошибке с частым классом. С
помощью метода sklearn.utils.class_weight.compute_class_weight были
вычислены веса классов, уравновешивающие дизбаланс классов. Однако,
модель выдавала множество ложноположительных ответов, и были подобраны
веса, немного отличающиеся от идеальных. В частности был увеличен вес
для класса, соответствующему фону, что уменьшило количество
ложноположительных срабатываний.

Обработка выхода модели: из-за зашумленности входных данных модель
может быть неуверена в своем ответе. Наблюдалась ситуация, когда на
выходе среди множества точек одного класса модель давала одной-двум
точкам другой класс. Было принято решение использовать алгоритм,
схожий по принципу с медианным фильтром. Точке присвается наиболее
частый среди 10 соседей класс(число 10 было выбрано из
соображений). Таким образом на выходе имеются разрозненные группы
точек, с которыми легче работать.

********************
Модель машинного обучения
********************

*про градиентный бустинг*

*про catboost*

В ходе работы работы был написан класс для тренировки модели Catboost с кросс-валидацией. TODO

********************
Валидация и тестирование
********************

Датасет был разбит на тренировочную и тестовую выборки в пропорциях 80:20.

Во время обучения использовалась кросс-валидация для подсчета метрик.

********************
Тюнинг гиперпараметров
********************

Из-за специфики задачи можно выявить две группы гиперпараметров:
1) параметры для подсчёта признаков точек и 2) параметры для настройки
Catboost.

1) К параметрам относятся: размер вокселей для дискретизации, порог
отсечения точек-выбросов, K - количество ближайших соседей для
составления облака соседей, R - радиус в котором рассматриваются
соседи, минимальное количество соседей для вычисления признаков по
облаку. Параметры подбирались через тщательный визуальный анализ
облаков точек, соображений здравого смысла и отчасти рассматривалось
влияние на обучаемость модели.

2) Основными параметрами Catboost являются 'depth', 'iterations',
'learning_rate'. Были выбраны значения, рекомендуемые разработчиками
Catboost, - они показали наилучший результат.
